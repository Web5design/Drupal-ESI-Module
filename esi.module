<?php
// $Id: esi.module$
require_once drupal_get_path('module', 'esi') . '/plugins/esi_rp_plugin.interface.inc';
require_once drupal_get_path('module', 'esi') . '/plugins/esi_cache_plugin.interface.inc';
/**
 * @file
 *   Implementation of ESI for Drupal.
 */
function esi_init(){
  
}

/**
 * Implementation of hook_menu().
 */
function esi_menu() {
  $items = array();
  $items['admin/settings/esi'] = array(
    'title'              => 'ESI',
    'description'        => 'Administer ESI.',
    'page callback'      => 'drupal_get_form',
    'page arguments'     => array('esi_settings'),
    'access callback'    => 'user_access',
    'access arguments'   => array('administer site configuration'),
    'file'               => 'esi.admin.inc',
  );

  return $items;
}

/**
 * Grabs any extra settings required for plugin configuration.
 */
function esi_settings_extra($plugin, $settings) {
    // I am thinking this will be called depending on what reverse proxy and caching mech you are using
    // That will then populate the settings from the approprite plugin
    
  # [Initialise Plugin Stuff] [Get extra settings] [$settings]
    return $settings;
}

/**
 * 
 */
function esi_get_cache_plugins(){
  $cache_plugins = array();
  $plugin_path = drupal_get_path('module', 'esi') . '/plugins';
  
  $files = file_scan_directory($plugin_path, 'esi_cache_plugin_([a-z0-9_]*).inc');
  foreach($files as $file){
    include_once($file->filename);
    $_rf = call_user_func(array($file->name, 'cache_register'));
    $cache_plugins[$file->name] = $_rf['name'];
  }
  
  return $cache_plugins;
}
/**
 * 
 */
function esi_get_rp_plugins(){  
  $rp_plugins = array();
  $plugin_path = drupal_get_path('module', 'esi') . '/plugins';
  
  $files = file_scan_directory($plugin_path, 'esi_rp_plugin_([a-z0-9_]*).inc');
  foreach($files as $file){
   include_once($file->filename); 
   $_rf = call_user_func(array($file->name, 'rp_register'));
   $rp_plugins[$file->name] = $_rf['name'];
  }
  
  return $rp_plugins;
}


/**
 * Implementation of hook_cron().
 */
function esi_cron() {}

/**
 * Implementation of hook_nodeapi().
 */
function esi_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'delete':
      break;
    case 'insert':
      break;
    case 'update':
      break;
  }
}

/**
 * Implementation of hook_block().
 */
function esi_block($op = 'list', $delta = 0, $edit = array()) {
  static $access;

  switch ($op) {
    case 'list':
      $blocks = esi_list_blocks();
      return $blocks;
    case 'view':
      break;
    case 'configure':
      break;
    case 'save':
      break;
  }
}

/**
 * This hook allows modules to modify the query and params objects.
 *
 * Example:
 *
 * function my_module_esi_modify_query(&$query, &$params) {
 *   // I only want to see articles by the admin!
 *   $query->add_filter("uid", 1);
 *
 * }
 */
function esi_modify_query(&$query, &$params, $caller) {

  foreach (module_implements('esi_modify_query') as $module) {
    $function_name = $module . '_esi_modify_query';
    $function_name($query, $params, $caller);
  }
  // Add array of fq parameters.
  if ($query && ($fq = $query->get_fq())) {
    $params['fq'] = $fq;
  }
}

/**
 * Implementation of hook_theme().
 */
function esi_theme() {
  return array(
  );
}

///**
// * Implementation of hook_form_[form_id]_alter
// */
//function esi_form_block_admin_display_form_alter(&$form) {
//  foreach ($form as $key => $block) {
//    if ((strpos($key, "esi_mlt-") === 0) && $block['module']['#value'] == 'esi') {
//      $form[$key]['delete'] = array('#value' => l(t('delete'), 'admin/settings/esi/mlt/delete_block/'. $block['delta']['#value']));
//    }
//  }
//}

/**
 * Returns a list of blocks. Used by hook_block
 */
function esi_list_blocks() {
  $blocks = variable_get('esi_blocks', array());
  foreach ($blocks as $delta => $settings) {
    $blocks[$delta] += array('info' => t('ESI: !name', array('!name' => $settings['name'])) , 'cache' => BLOCK_CACHE_PER_PAGE);
  }
  return $blocks;
}

function esi_load_block($delta) {
  $blocks = variable_get('esi_blocks', array());
  return isset($blocks[$delta]) ? $blocks[$delta] : FALSE;
}

